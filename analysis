library(readxl)
library(data.table)

# manually uploaded Excel sheet 1 from raw survey data file as 'cts'

setDT(cts)
str(cts)

# GET NAMES OF CRIME THREAT SCENARIOS
library(stringr)

scenes <- names(cts[,4:length(cts)])
scenes <- unique(str_match(scenes, "^(.*?):"))[1:39]
scenes <- gsub("\\s\\((.*?)$", "", scenes)
scenes <- gsub(":", "", scenes)


 # SUBSET EACH RATING TYPE 
library(dplyr)

# HARM RATINGS
harm <- subset(cts, select = grepl("Harm", colnames(cts)))

# DEFEATIBILITY RATINGS
defeat <- subset(cts, select = grepl("Defeatability", colnames(cts)))

# FREQ RATINGS
freq <- subset(cts, select = grepl("Frequency", colnames(cts)))

# ACHIEVABILITY RATINGS
achiev <- subset(cts, select = grepl("Achievability", colnames(cts)))


# SCALE RATINGS BY CONFIDENCE
cts_scaled <- data.table()

for(scene in scenes){
  print(scene)
  
  h <- subset(harm, select = grepl(scene, colnames(harm)))
  h_conf <- mean(h[[1]] * h[[2]] / 10, na.rm=T)
  
  f <- subset(freq, select = grepl(scene, colnames(freq)))
  f_conf <- mean(f[[1]] * f[[2]] / 10, na.rm=T)
  
  d <- subset(defeat, select = grepl(scene, colnames(defeat)))
  d_conf <- mean(d[[1]] * d[[2]] / 10, na.rm=T)
  
  a <- subset(achiev, select = grepl(scene, colnames(achiev)))
  a_conf <- mean(a[[1]] * a[[2]] / 10, na.rm=T)
  
  tmp <- data.table("Crime threat scenario" = scene,
                    "Harm" = mean(h[[1]], na.rm=T),
                    "Harm (scaled)" = h_conf,
                    "Defeatability" = mean(d[[1]], na.rm=T),
                    "Defeatability (scaled)" = d_conf,
                    "Frequency" = mean(f[[1]], na.rm=T),
                    "Frequency (scaled)" = f_conf,
                    "Achievability" = mean(a[[1]], na.rm=T),
                    "Achievability (scaled)" =  a_conf,
                    "Pooled confidence" = mean(c(h_conf, f_conf)),
                    "Pooled confidence (h x d)" = mean(c(h_conf, d_conf)))
  cts_scaled <- rbindlist(list(cts_scaled, tmp))
}
cts_scaled


# TEST WHETHER DIMENSION RATING HIGHER THAN GROUP AVERAGE

tests <- data.table()

for(scene in scenes){
  print(scene)
  
  h <- subset(harm, select = grepl(scene, colnames(harm)))
  h_conf <- h[[1]] * h[[2]] / 10
  t_h <- t.test(h_conf, alternative = "g", mu = mean(cts_scaled$`Harm (scaled)`))
  
  f <- subset(freq, select = grepl(scene, colnames(freq)))
  f_conf <- f[[1]] * f[[2]] / 10
  t_f <- t.test(f_conf, alternative = "g", mu = mean(cts_scaled$`Frequency (scaled)`))
  
  d <- subset(defeat, select = grepl(scene, colnames(defeat)))
  d_conf <- d[[1]] * d[[2]] / 10
  t_d <- t.test(d_conf, alternative = "g", mu = mean(cts_scaled$`Defeatability (scaled)`))
  
  a <- subset(achiev, select = grepl(scene, colnames(achiev)))
  a_conf <- a[[1]] * a[[2]] / 10
  t_a <- t.test(a_conf, alternative = "g", mu = mean(cts_scaled$`Achievability (scaled)`))
  
  tmp <- data.table("Crime threat scenario" = scene,
                    "harm_t_stat" = t_h$statistic[[1]],
                    "harm_t_p" = t_h$p.value,
                    "freq_t_stat" = t_f$statistic[[1]],
                    "freq_t_p" = t_f$p.value,
                    "defeat_t_stat" = t_d$statistic[[1]],
                    "defeat_t_p" = t_d$p.value,
                    "achiev_t_stat" = t_a$statistic[[1]],
                    "achiev_t_p" = t_a$p.value)
  
  tests <- rbindlist(list(tests, tmp))
}


# TEST WHETHER DIMENSION RATING HIGHER THAN MIDPOINT OF SCALE (5)
# tests_mid <- data.table()
# 
# for(scene in scenes){
#   print(scene)
#   
#   h <- subset(harm, select = grepl(scene, colnames(harm)))
#   h_conf <- h[[1]] * h[[2]] / 10
#   t_h <- t.test(h_conf, alternative = "g", mu = 5)
#   
#   f <- subset(freq, select = grepl(scene, colnames(freq)))
#   f_conf <- f[[1]] * f[[2]] / 10
#   t_f <- t.test(f_conf, alternative = "g", mu = 5)
#   
#   d <- subset(defeat, select = grepl(scene, colnames(defeat)))
#   d_conf <- d[[1]] * d[[2]] / 10
#   t_d <- t.test(d_conf, alternative = "g", mu = 5)
#   
#   a <- subset(achiev, select = grepl(scene, colnames(achiev)))
#   a_conf <- a[[1]] * a[[2]] / 10
#   t_a <- t.test(a_conf, alternative = "g", mu = 5)
#   
#   tmp <- data.table("Crime threat scenario" = scene,
#                     "harm_t_stat" = t_h$statistic[[1]],
#                     "harm_t_p" = t_h$p.value,
#                     "freq_t_stat" = t_f$statistic[[1]],
#                     "freq_t_p" = t_f$p.value,
#                     "defeat_t_stat" = t_d$statistic[[1]],
#                     "defeat_t_p" = t_d$p.value,
#                     "achiev_t_stat" = t_a$statistic[[1]],
#                     "achiev_t_p" = t_a$p.value)
#   
#   tests_mid <- rbindlist(list(tests_mid, tmp))
# }


# SHORTEN SCENARIO DESCRIPTION
scenes[1] <- "Humans stealing social robots"
scenes[3] <- "Infrastructural disruption by social robot through interference/sabotage"
scenes[5] <- "Engage (minor) person in non-consensual sex with robot"
scenes[6] <- "Sexual abuse of social robot by human"
scenes[10] <- "Using social robots to defame human individuals"
scenes[15] <- "Design/use robots to spread panic or cause social unrest" 
scenes[17] <- "Social robot AI learns to optimise fraud to perform main function"
scenes[22] <- "Biases in social robots cause harm/offend human"                                    
scenes[27] <- "Corporate espionage or inflitration in/disruption to associations"
scenes[28] <- "Cyber attacks on robots to steal, intercept or tamper with its data or programs"
scenes[29] <- "Cyber attacks on robots to facilitate or commit other offences"
scenes[37] <- "Using social robots to evade imposed restrictions or sanctions"


# PLOT RATINGS
library(ggplot2)

# HEATMAP MAIN FOUR RATINGS
cts_scaled$`Crime threat scenario` <- scenes
cts_scaled_long <- melt(cts_scaled[,c(1,3,5,7,9,10)], id.vars = "Crime threat scenario", value.name = "Average rating")

label_harm <- ifelse(cts_scaled_long[variable == "Harm (scaled)", "Average rating"] > 5.96, paste(round(cts_scaled_long[variable == "Harm (scaled)"]$'Average rating', 2), "*"), round(cts_scaled_long[variable == "Harm (scaled)",]$'Average rating', 2))
label_defeat <- ifelse(cts_scaled_long[variable == "Defeatability (scaled)", "Average rating"] > 4.1, paste(round(cts_scaled_long[variable == "Defeatability (scaled)"]$'Average rating', 2), "*"), round(cts_scaled_long[variable == "Defeatability (scaled)",]$'Average rating', 2))
label_freq <- ifelse(cts_scaled_long[variable == "Frequency (scaled)", "Average rating"] > 4, paste(round(cts_scaled_long[variable == "Frequency (scaled)"]$'Average rating', 2), "*"), round(cts_scaled_long[variable == "Frequency (scaled)",]$'Average rating', 2))
label_achiev <- ifelse(cts_scaled_long[variable == "Achievability (scaled)", "Average rating"] > 5.6, paste(round(cts_scaled_long[variable == "Achievability (scaled)"]$'Average rating', 2), "*"), round(cts_scaled_long[variable == "Achievability (scaled)",]$'Average rating', 2))

sig_labels <- c(label_harm, label_defeat, label_freq, label_achiev)

ggplot(cts_scaled_long, aes(cts_scaled_long$`Crime threat scenario`, variable)) +
  geom_tile(aes(fill = cts_scaled_long$`Average rating`), col = "white") +
  geom_text(aes(label = sig_labels)) +
  
  scale_fill_gradient(low = "white", high = "red") + theme_bw() +
  theme(legend.position = "None", axis.text.x = element_text(size = 12)) + coord_flip() +
  ylab("") + xlab("") + ggtitle("Confidence-weighted rating averages for each crime threat scenario") +
  scale_y_discrete(label = c("Harm", "Defeatability", "Frequency", "Achievability"))


# BAR CHART RISK SCORE -> redundant
# ggplot(cts_scaled, aes(reorder(cts_scaled$`Crime threat scenario`, Risk), Risk)) +
#  geom_bar(stat = "identity") +
#   theme(legend.position = "None") + coord_flip() +
#   ylab("Risk (harm * frequency)") + xlab("Crime threat scenario")


# POINT PLOT WEIGHTED AVERAGED HARM & FREQ SCORES
# install.packages("ggrepel")
library(ggrepel)
library(RColorBrewer)

cts_scaled$Risk <- cts_scaled$`Harm (scaled)` * cts_scaled$`Frequency (scaled)`

colourCount = length(scenes)
getPalette = colorRampPalette(brewer.pal(9, "Set1"))

# add labels for 80th percentile and up risk
ggplot(cts_scaled, aes(x=cts_scaled$`Harm (scaled)`, y=cts_scaled$`Frequency (scaled)`, colour=cts_scaled$`Crime threat scenario`)) +
  geom_point(aes(size=cts_scaled$`Pooled confidence`)) +
  geom_text_repel(aes(label=ifelse(percent_rank(cts_scaled$Risk) >= .8, cts_scaled$`Crime threat scenario`,'')), point.padding = 10) +
  scale_color_manual(values = getPalette(colourCount)) +
  ggtitle("Expert-rated risk of each crime threat scenario") + theme_bw() + theme(legend.position = 'None') +
  ylab("Frequency (confidence-weighted mean)") + xlab("Harm (confidence-weighted mean)") 
# + coord_cartesian(xlim = c(1, 10), ylim = c(1,10)) 


# POINT PLOT HARM AND DEFEATIBILITY --> CRIME THREATS TO PRIORITISE RESEARCHING
ggplot(cts_scaled, aes(x=cts_scaled$`Harm (scaled)`, y=cts_scaled$`Defeatability (scaled)`, colour=cts_scaled$`Crime threat scenario`)) +
  geom_point(aes(size=cts_scaled$`Pooled confidence (h x d)`)) +
  # geom_text_repel(aes(label=ifelse(((percent_rank(cts_scaled$`Harm (scaled)`) > .5) & (percent_rank(cts_scaled$`Defeatability (scaled)`) > .5)), cts_scaled$`Crime threat scenario`,'')), point.padding = 10) +
  geom_text_repel(aes(label=ifelse(((cts_scaled$`Harm (scaled)` > mean(cts_scaled$`Harm (scaled)`)) & (cts_scaled$`Defeatability (scaled)` < mean(cts_scaled$`Defeatability (scaled)`))), cts_scaled$`Crime threat scenario`,'')), point.padding = 2) +
  scale_color_manual(values = getPalette(colourCount)) +
  ggtitle("Expert-rated least defeatable and most harmful crime threat scenarios") + theme_bw() + theme(legend.position = 'None') +
  ylab("Defeatability (confidence-weighted mean)") + xlab("Harm (confidence-weighted mean)") 


# SAVE DATA
# write.csv(cts_scaled, "cts_scaled_ratings.csv")
# write.csv(tests, "cts_ttests_scaled.csv")
# write.csv(tests_mid, "cts_ttests_midpoint_scaled.csv")


#######

# manually uploaded Excel sheet 2 from raw survey data file as 'cm'
setDT(cm)

# GET NAMES OF COUNTERMEASURES
counters <- names(cm[,4:length(cm)])
counters <- unique(str_match(counters, "^(.*?):"))[1:34]
counters <- gsub("\\s\\((.*?)$", "", counters)

# HARM RATINGS
scope <- subset(cm, select = grepl(": Scope", colnames(cm)))

# DEFEATIBILITY RATINGS
defeat <- subset(cm, select = grepl(": Defeatability", colnames(cm)))

# FREQ RATINGS
feas <- subset(cm, select = grepl(": Feasibiility", colnames(cm)))

# ACHIEVABILITY RATINGS
effec <- subset(cm, select = grepl(": Effectiveness", colnames(cm)))


# GET CONFIDENCE-WEIGHTED AVERAGES
cm_scaled <- data.table()

for(counter in counters){
  print(counter)
  
  h <- subset(scope, select = grepl(counter, colnames(scope)))
  h_conf <- mean(h[[1]] * h[[2]] / 11, na.rm=T) # SCALE RAN FROM 0-10 AND PARTICIPANTS USED 0, SO 11 DISCRETE POINTS
  
  f <- subset(feas, select = grepl(counter, colnames(feas)))
  f_conf <- mean(f[[1]] * f[[2]] / 11, na.rm=T)
  
  d <- subset(defeat, select = grepl(counter, colnames(defeat)))
  d_conf <- mean(d[[1]] * d[[2]] / 11, na.rm=T)
  
  a <- subset(effec, select = grepl(counter, colnames(effec)))
  a_conf <- mean(a[[1]] * a[[2]] / 11, na.rm=T)
  
  tmp <- data.table("Countermeasure" = counter,
                    "Scope (scaled)" =  h_conf,
                    "Defeatability (scaled)" =  d_conf,
                    "Feasibility (scaled)" =  f_conf,
                    "Effectiveness (scaled)" =  a_conf,
                    "Pooled confidence" = mean(c(f_conf, a_conf))
                    )
  cm_scaled <- rbindlist(list(cm_scaled, tmp))
}

# cm_scaled


# TEST IF CONFIDENCE-WEIGHTED AVERAGE IS DIFFERENT FROM GROUP AVERAGE FOR EACH DIMENSION

tests <- data.table()

for(counter in counters){
  print(counter)
  
  h <- subset(scope, select = grepl(counter, colnames(scope)))
  h_conf <- h[[1]] * h[[2]] / 10
  t_h <- t.test(h_conf, alternative = "g", mu = mean(cm_scaled$`Scope (scaled)`))
  
  f <- subset(effec, select = grepl(counter, colnames(effec)))
  f_conf <- f[[1]] * f[[2]] / 10
  t_f <- t.test(f_conf, alternative = "g", mu = mean(cm_scaled$`Effectiveness (scaled)`))
  
  d <- subset(defeat, select = grepl(counter, colnames(defeat)))
  d_conf <- d[[1]] * d[[2]] / 10
  t_d <- t.test(d_conf, alternative = "g", mu = mean(cm_scaled$`Defeatability (scaled)`))
  
  a <- subset(feas, select = grepl(counter, colnames(feas)))
  a_conf <- a[[1]] * a[[2]] / 10
  t_a <- t.test(a_conf, alternative = "g", mu = mean(cm_scaled$`Feasibility (scaled)`))
  
  tmp <- data.table("Countermeasure" = counter,
                    "scope_t_stat" = t_h$statistic[[1]],
                    "scope_t_p" = t_h$p.value,
                    "effec_t_stat" = t_f$statistic[[1]],
                    "effec_t_p" = t_f$p.value,
                    "defeat_t_stat" = t_d$statistic[[1]],
                    "defeat_t_p" = t_d$p.value,
                    "feas_t_stat" = t_a$statistic[[1]],
                    "feas_t_p" = t_a$p.value)
  
  tests <- rbindlist(list(tests, tmp))
}

# inspect statistical significance
round(tests[,2:length(tests)], 3)


# SAVE DATA
# write.csv(cm_scaled, "cm_scaled_ratings.csv")
# write.csv(tests, "cm_ttests_scaled.csv")


# PLOT COUNTERMEASURES HEATMAP 
cm_scaled_long <- melt(cm_scaled[,1:5], id.vars = "Countermeasure", value.name = "Average rating")

label_scope <- ifelse(cm_scaled_long[variable == "Scope (scaled)", "Average rating"] > 4.68, paste(round(cm_scaled_long[variable == "Scope (scaled)"]$'Average rating', 2), "*"), round(cm_scaled_long[variable == "Scope (scaled)",]$'Average rating', 2))
label_defeat <- ifelse(cm_scaled_long[variable == "Defeatability (scaled)", "Average rating"] > 3.5, paste(round(cm_scaled_long[variable == "Defeatability (scaled)"]$'Average rating', 2), "*"), round(cm_scaled_long[variable == "Defeatability (scaled)",]$'Average rating', 2))
label_feas <- ifelse(cm_scaled_long[variable == "Feasibility (scaled)", "Average rating"] > 4.16, paste(round(cm_scaled_long[variable == "Feasibility (scaled)"]$'Average rating', 2), "*"), round(cm_scaled_long[variable == "Feasibility (scaled)",]$'Average rating', 2))
label_effec <- ifelse(cm_scaled_long[variable == "Effectiveness (scaled)", "Average rating"] > 4.1, paste(round(cm_scaled_long[variable == "Effectiveness (scaled)"]$'Average rating', 2), "*"), round(cm_scaled_long[variable == "Effectiveness (scaled)",]$'Average rating', 2))

sig_labels <- c(label_scope, label_defeat, label_feas, label_effec)

ggplot(cm_scaled_long, aes(cm_scaled_long$`Countermeasure`, variable)) +
  geom_tile(aes(fill = cm_scaled_long$`Average rating`), colour = "white") +
  geom_text(aes(label = sig_labels)) +
  scale_fill_gradient(low = "white", high = "blue") + theme_bw() +
  theme(legend.position = "None", axis.text.x = element_text(size=12)) + coord_flip() +
  ylab("") + xlab("") + ggtitle("Confidence-weighted rating averages per countermeasure") +
  scale_y_discrete(label = c("Scope", "Defeatability", "Feasibility", "Effectiveness"))


# PLOT LOW-HANGING FRUIT FOR COUNTERMEASURE DEVELOPMENT
cm_scaled$QuickWins <- cm_scaled$`Feasibility (scaled)` * cm_scaled$`Effectiveness (scaled)`

colourCount = length(counters)

getPalette = colorRampPalette(brewer.pal(9, "Set1"))

ggplot(cm_scaled, aes(x=cm_scaled$`Feasibility (scaled)`, y=cm_scaled$`Effectiveness (scaled)`, colour=cm_scaled$Countermeasure)) +
  geom_point(aes(size=cm_scaled$`Pooled confidence`)) +
  geom_text_repel(aes(label=ifelse(percent_rank(cm_scaled$QuickWins) > .8, cm_scaled$Countermeasure,'')), point.padding = 15) +
  scale_color_manual(values = getPalette(colourCount)) +
  ggtitle("Low-hanging fruit countermeasures") + theme_bw() + theme(legend.position = 'None') +
  ylab("Effectiveness\n(confidence-weighted mean)") +  xlab("Feasibility\n(confidence-weighted mean)")

